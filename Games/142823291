local Rayfield = loadstring(game:HttpGet(
    "https://raw.githubusercontent.com/topraqk1/helixia-hub/refs/heads/main/Scripts/library.lua"))()
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local plr = game.Players.LocalPlayer

local gameName = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name or "Unknown Game"

local Window = Rayfield:CreateWindow({
    Name = "Helixia Hub | " .. gameName,
    Icon = "gamepad",
    LoadingTitle = "Helixia Hub",
    LoadingSubtitle = "discord.gg/JRzMYAWvUZ",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = "HelixiaHub",
        FileName = "Config"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Helixia Hub",
        Subtitle = "Key System",
        Note = "Anahtar almak için özel bilgi verilmemiş",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = { "Hello" }
    }
})

local MainTab = Window:CreateTab("Home", "home")
MainTab:CreateSection("General")

MainTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        local ts = game:GetService("TeleportService")
        local placeId = game.PlaceId
        ts:Teleport(placeId, plr)
    end,
})

MainTab:CreateButton({
    Name = "Hop to New Server",
    Callback = function()
        local HttpService = game:GetService("HttpService")
        local TeleportService = game:GetService("TeleportService")
        local Servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" ..
            game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100")).data

        for _, v in pairs(Servers) do
            if v.playing < v.maxPlayers then
                TeleportService:TeleportToPlaceInstance(game.PlaceId, v.id, plr)
                break
            end
        end
    end,
})

local PlayerTab = Window:CreateTab("Player", "user")
PlayerTab:CreateSection("Player Settings")

local character = function() return plr.Character or plr.CharacterAdded:Wait() end

PlayerTab:CreateSlider({
    Name = "Walk Speed",
    Range = { 16, 250 },
    Increment = 1,
    CurrentValue = 16,
    Flag = "Slider1",
    Callback = function(Value)
        character():WaitForChild("Humanoid").WalkSpeed = Value
    end,
})

PlayerTab:CreateSlider({
    Name = "Jump Power",
    Range = { 50, 300 },
    Increment = 5,
    CurrentValue = 50,
    Flag = "Slider1",
    Callback = function(Value)
        character():WaitForChild("Humanoid").JumpPower = Value
    end,
})

local infiniteJumpEnabled = false

PlayerTab:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Callback = function(Value)
        infiniteJumpEnabled = Value
        if infiniteJumpEnabled then
            Rayfield:Notify({
                Title = "Infinite Jump",
                Content = "Enabled",
                Duration = 3
            })
        else
            Rayfield:Notify({
                Title = "Infinite Jump",
                Content = "Disabled",
                Duration = 3
            })
        end
    end,
})

local UIS = game:GetService("UserInputService")
UIS.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        character():WaitForChild("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
    end
end)

local GameTab = Window:CreateTab("Game", "crosshair")

local function getMurderer()
    for _, plr in ipairs(game.Players:GetPlayers()) do
        if plr.Backpack:FindFirstChild("Knife") or (plr.Character and plr.Character:FindFirstChild("Knife")) then
            return plr
        end
    end
    return nil
end

local function getSheriff()
    for _, plr in ipairs(game.Players:GetPlayers()) do
        if plr.Backpack:FindFirstChild("Gun") or (plr.Character and plr.Character:FindFirstChild("Gun")) then
            return plr
        end
    end
    return nil
end

local function getPlayerRole()
    local knife = plr.Backpack:FindFirstChild("Knife") or (plr.Character and plr.Character:FindFirstChild("Knife"))
    local gun = plr.Backpack:FindFirstChild("Gun") or (plr.Character and plr.Character:FindFirstChild("Gun"))

    if knife then
        return "Murderer"
    elseif gun then
        return "Sheriff"
    else
        return "Innocent"
    end
end

GameTab:CreateSection("Role Information")

local RoleLabel = GameTab:CreateLabel("Your Role: Unknown")
local SheriffLabel = GameTab:CreateLabel("Sheriff: Unknown")
local MurdererLabel = GameTab:CreateLabel("Murderer: Unknown")

task.spawn(function()
    while true do
        local currentRole = getPlayerRole()
        local Sheriff = getSheriff()
        local Murderer = getMurderer()

        RoleLabel:Set("Your Role: " .. currentRole)
        SheriffLabel:Set("Sheriff: " .. Sheriff)
        MurdererLabel:Set("Murderer: " .. Murderer)
        task.wait(1)
    end
end)

local function sendRoleInfoToChannels()
    local textchannels = game:GetService("TextChatService"):WaitForChild("TextChannels"):GetChildren()
    local murd = findMurderer()
    local sher = findSheriff()

    if not murd and not sher then
        Rayfield:Notify({
            Title = "Role Information",
            Content = "The game hasn't started yet.",
            Duration = 3
        })
    end

    local murdName = "-"
    local sherName = "-"
    if murd then murdName = murd.Name end
    if sher then sherName = sher.Name end
    local message = string.format([[Murderer: %s |
Sheriff: %s]], murdName, sherName)

    for _, textchannel in ipairs(textchannels) do
        if textchannel.Name == "RBXSystem" then
            continue
        end
        textchannel:SendAsync(message)
    end
end

GameTab:CreateButton({
    Name = "Send Role Info to Chat",
    Callback = function()
        sendRoleInfoToChannels()
        Rayfield:Notify({
            Title = "Message Sent",
            Content = "Role info sent to chat.",
            Duration = 3
        })
    end
})

GameTab:CreateDivider()

local coinAutoCollect = false

function getMap()
    for _, o in ipairs(workspace:GetChildren()) do
        if o:FindFirstChild("CoinContainer") and o:FindFirstChild("Spawns") then
            return o
        end
    end
    return nil
end

local gunDropNotificationEnabled = false

GameTab:CreateToggle({
    Name = "Gun Drop Notification",
    CurrentValue = false,
    Callback = function(Value)
        gunDropNotificationEnabled = Value
        Rayfield:Notify({
            Title = "Gun Drop Notification",
            Content = Value and "Enabled" or "Disabled",
            Duration = 3
        })
    end,
})

task.spawn(function()
    while task.wait(1) do
        if gunDropNotificationEnabled then
            local map = getMap()
            if map and map:FindFirstChild("GunDrop") then
                local gunDrop = map.GunDrop
                if gunDrop and gunDrop:IsA("Model") then
                    Rayfield:Notify({
                        Title = "Gun Dropped",
                        Content = "A gun has been dropped! Find it on the map.",
                        Duration = 3
                    })
                end
            end
        end
    end
end)

GameTab:CreateToggle({
    Name = "Auto Collect Coins",
    CurrentValue = false,
    Callback = function(Value)
        coinAutoCollect = Value
        Rayfield:Notify({
            Title = "Coin Auto Collect",
            Content = Value and "Enabled" or "Disabled",
            Duration = 3
        })
    end,
})

task.spawn(function()
    while task.wait(0.1) do
        if not coinAutoCollect then continue end

        local map = getMap()
        if map and map:FindFirstChild("CoinContainer") and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = plr.Character.HumanoidRootPart
            for _, coin in ipairs(map.CoinContainer:GetChildren()) do
                if coin:IsA("Model") then
                    pcall(function()
                        coin:PivotTo(hrp.CFrame)
                    end)
                end
            end
        end
    end
end)

GameTab:CreateButton({
    Name = "God Mode",
    Callback = function()
        local char = plr.Character
        if not char then return end
        char:FindFirstChildOfClass("Humanoid").Name = "NotHumanoid"
        wait(0.5)
        local newHum = Instance.new("Humanoid", char)
        newHum.HipHeight = 2
        Rayfield:Notify({
            Title = "God Mode",
            Content = "Activated (may break on death)",
            Duration = 4
        })
    end
})
